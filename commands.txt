######### PARTIE 1 ###############################

### Utilisateur A
# 1- Générer une paire de clés
openssl genrsa -out paireA.pem 2048

# 2- La visualiser
openssl rsa -in paireA.pem -text

# 3- Chiffrer sysmétriquement le fichier de la paire A
openssl rsa -in paireA.pem -des3 -out paireA.pem

# 4- Extraire la partie publique
openssl rsa -in paireA.pem -pubout -out publicA.pem

### Utilisateur B
# Faire la même manipulation

### Les deux User A et User B s'échangent leur clés PUBLIQUES

########## PARTIE 2 ###############################

### Utilisateur A
# 1- On considére un fichier gros_fic.file

# 2- Cryptage SYMETRIQUE du gros fichier. Un mot de passe sera demandé par le système
openssl enc -e -des3 -in gros_fic.file -out crypt_gros_fic.file

# 3- Insérer le mot de passe dans un fichier password.txt

# 4- Cryptage ASYMETRIQUE du petit fichier contenant mot de passe avec la clé PRIVEE
openssl rsautl -encrypt -in password.txt -inkey paireA.pem crypt_password.txt

# 5- Création l'empreinte du gros fichier
openssl dgst -sha1 -out empreinte.txt gros_fic.file

# 6- Signature du l'mepreinture précédemment créée avec ma clé PRIVEE 
openssl rsautl -sign -in empreinte.txt -inkey paireA.pem -out signature.txt

# 7- Envoyer à B les fichiers suivants
    - crypt_gros_fic.file
    - crypt_password.txt
    - signature.txt

######### PARTIE 3 ###############################
### Utilisateur B

# 1- Vérifier la signature
openssl rsautl -verify -in signature.txt -pubin -inkey publicA.txt -out empreinte
# !!! SI un quelconque message s'affiche à l'écran, c'est que la signature n'est pas confirme

# 2- Décrypter le crypt_password.txt avec la clé PUBLIQUE de A
openssl rsautl -decrypt -in crypt_password.txt -pubin -inkey publicA.pem clair_password.txt

# 3- Décrypter le crypt_gros_fic.file
openssl enc -d -des3 -in crypt_gros_fic.file -out clair_gros_fic.file

# Voilà FIN